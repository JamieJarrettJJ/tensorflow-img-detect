{"version":3,"sources":["App.js","index.js"],"names":["App","useState","isModelLoading","setIsModelLoading","model","setModel","imageURL","setImageURL","results","setResults","history","setHistory","imageRef","useRef","fileInputRef","loadModel","a","mobilenet","console","log","identify","classify","current","useEffect","className","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","target","class","width","height","viewBox","style","fill","color","position","top","border","left","transform","aria-hidden","d","transformOrigin","accept","capture","onChange","e","files","length","url","URL","createObjectURL","ref","onClick","click","src","alt","crossOrigin","map","result","index","probability","toFixed","image","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7d26605c.chunk.js","sourcesContent":["import { useState, useEffect, useRef } from \"react\";\nimport * as mobilenet from \"@tensorflow-models/mobilenet\";\n\nfunction App() {\n  const [isModelLoading, setIsModelLoading] = useState(false);\n  const [model, setModel] = useState(null);\n  const [imageURL, setImageURL] = useState(null);\n  const [results, setResults] = useState([]);\n  const [history, setHistory] = useState([]);\n\n  const imageRef = useRef();\n  const textInputRef = useRef();\n  const fileInputRef = useRef();\n\n  const loadModel = async () => {\n    setIsModelLoading(true);\n    try {\n      const model = await mobilenet.load();\n      setModel(model);\n      setIsModelLoading(false);\n    } catch (error) {\n      console.log(error);\n      setIsModelLoading(false);\n    }\n  };\n\n  const uploadImage = (e) => {\n    const { files } = e.target;\n    if (files.length > 0) {\n      const url = URL.createObjectURL(files[0]);\n      setImageURL(url);\n    } else {\n      setImageURL(null);\n    }\n  };\n\n  const identify = async () => {\n    const results = await model.classify(imageRef.current);\n    setResults(results);\n  };\n\n  const triggerUpload = () => {\n    fileInputRef.current.click();\n  };\n\n  useEffect(() => {\n    loadModel();\n  }, []);\n\n  useEffect(() => {\n    if (imageURL) {\n      setHistory([imageURL, ...history]);\n    }\n  }, [imageURL]);\n\n  if (isModelLoading) {\n    return <h2>Model Loading...</h2>;\n  }\n\n  return (\n    <div className=\"App\">\n      <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark \">\n        <a className=\"navbar-brand\" href=\"/pathfinding-visualizer\">\n          <b>7 Days, 7 Projects - TensorFlow Image Identification (Day 7/7)</b>\n        </a>\n\n        <button\n          className=\"navbar-toggler\"\n          type=\"button\"\n          data-toggle=\"collapse\"\n          data-target=\"#navbarNav\"\n          aria-controls=\"navbarNav\"\n          aria-expanded=\"false\"\n          aria-label=\"Toggle navigation\"\n        >\n          <span className=\"navbar-toggler-icon\"></span>\n        </button>\n        <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\n          <ul className=\"navbar-nav\">\n            <li className=\"nav-item\">\n              <a className=\"nav-link\" href=\"https://jj1.dev/projects\">\n                More Projects\n              </a>\n            </li>\n          </ul>\n        </div>\n      </nav>\n      <a\n        target=\"_blank\"\n        href=\"https://github.com/JamieJarrettJJ/tensorflow-img-detect\"\n        class=\"github-corner\"\n        aria-label=\"View source on GitHub\"\n      >\n        <svg\n          width=\"80\"\n          height=\"80\"\n          viewBox=\"0 0 250 250\"\n          style={{\n            fill: \"rgb(21 21 19 / 29%)\",\n            color: \"#fff\",\n            position: \"absolute\",\n            top: \"55\",\n            border: \"0\",\n            left: \"0\",\n            transform: \"scale(-1, 1)\",\n          }}\n          aria-hidden=\"true\"\n        >\n          <path d=\"M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z\"></path>\n          <path\n            d=\"M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2\"\n            fill=\"currentColor\"\n            style={{ transformOrigin: \"130px 106px\" }}\n            class=\"octo-arm\"\n          ></path>\n          <path\n            d=\"M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z\"\n            fill=\"currentColor\"\n            class=\"octo-body\"\n          ></path>\n        </svg>\n      </a>\n      <div className=\"inputHolder\">\n        <input\n          type=\"file\"\n          accept=\"image/*\"\n          capture=\"camera\"\n          className=\"uploadInput\"\n          onChange={uploadImage}\n          ref={fileInputRef}\n        />\n        <button className=\"uploadImage\" onClick={triggerUpload}>\n          Upload Image\n        </button>\n      </div>\n      <div className=\"mainWrapper\">\n        <div className=\"mainContent\">\n          <div className=\"imageHolder\">\n            {imageURL && (\n              <img\n                src={imageURL}\n                alt=\"Upload Preview\"\n                crossOrigin=\"anonymous\"\n                ref={imageRef}\n              />\n            )}\n          </div>\n          {results.length > 0 && (\n            <div className=\"resultsHolder\">\n              {results.map((result, index) => {\n                return (\n                  <div className=\"result\" key={result.className}>\n                    <span className=\"name\">{result.className}</span>\n                    <span className=\"confidence\">\n                      Confidence level: {(result.probability * 100).toFixed(2)}%{\" \"}\n                      {index === 0 && (\n                        <span className=\"bestGuess\">Best Guess</span>\n                      )}\n                    </span>\n                  </div>\n                );\n              })}\n            </div>\n          )}\n        </div>\n        {imageURL && (\n          <button className=\"button\" onClick={identify}>\n            Identify Image\n          </button>\n        )}\n      </div>\n      {history.length > 0 && (\n        <div className=\"recentPredictions\">\n          <h2>Recent Images</h2>\n          <div className=\"recentImages\">\n            {history.map((image, index) => {\n              return (\n                <div className=\"recentPrediction\" key={`${image}${index}`}>\n                  <img\n                    src={image}\n                    alt=\"Recent Prediction\"\n                    onClick={() => setImageURL(image)}\n                  />\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}